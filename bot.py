import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, ConversationHandler

TOKEN = "7878360475:AAGRpyLWxPTwB8W65Gze6yiRRtfIonw0Q2s"

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
NAME, GENDER, AGE, HEIGHT, WEIGHT, ACTIVITY, GOAL = range(7)

# –û—Ç–≤–µ—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
gender_keyboard = [['–ú—É–∂—á–∏–Ω–∞', '–ñ–µ–Ω—â–∏–Ω–∞']]
activity_keyboard = [['–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è', '–ù–∏–∑–∫–∞—è'], ['–°—Ä–µ–¥–Ω—è—è', '–í—ã—Å–æ–∫–∞—è', '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è']]
goal_keyboard = [['–ü–æ—Ö—É–¥–µ–Ω–∏–µ', '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ', '–ù–∞–±–æ—Ä –≤–µ—Å–∞']]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥. –î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—ë–º —Ç–µ–±–µ –ø–∏—Ç–∞–Ω–∏–µ. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    return NAME

async def name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=ReplyKeyboardMarkup(gender_keyboard, one_time_keyboard=True, resize_keyboard=True))
    return GENDER

async def gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['gender'] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    return AGE

async def age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['age'] = int(update.message.text)
    await update.message.reply_text("–£–∫–∞–∂–∏ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–º:")
    return HEIGHT

async def height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['height'] = int(update.message.text)
    await update.message.reply_text("–£–∫–∞–∂–∏ —Å–≤–æ–π –≤–µ—Å –≤ –∫–≥:")
    return WEIGHT

async def weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['weight'] = float(update.message.text)
    await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?", reply_markup=ReplyKeyboardMarkup(activity_keyboard, one_time_keyboard=True, resize_keyboard=True))
    return ACTIVITY

async def activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['activity'] = update.message.text
    await update.message.reply_text("–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è —Ü–µ–ª—å?", reply_markup=ReplyKeyboardMarkup(goal_keyboard, one_time_keyboard=True, resize_keyboard=True))
    return GOAL

async def goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['goal'] = update.message.text
    user = context.user_data

    # –†–∞—Å—á—ë—Ç –ö–ë–ñ–£
    gender_coef = 5 if user['gender'] == '–ú—É–∂—á–∏–Ω–∞' else -161
    bmr = 10 * user['weight'] + 6.25 * user['height'] - 5 * user['age'] + gender_coef

    activity_levels = {
        '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è': 1.2,
        '–ù–∏–∑–∫–∞—è': 1.375,
        '–°—Ä–µ–¥–Ω—è—è': 1.55,
        '–í—ã—Å–æ–∫–∞—è': 1.725,
        '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è': 1.9
    }

    total_calories = bmr * activity_levels[user['activity']]

    if user['goal'] == '–ü–æ—Ö—É–¥–µ–Ω–∏–µ':
        total_calories -= 300
    elif user['goal'] == '–ù–∞–±–æ—Ä –≤–µ—Å–∞':
        total_calories += 300

    # –ë–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ)
    proteins = round((total_calories * 0.3) / 4)
    fats = round((total_calories * 0.25) / 9)
    carbs = round((total_calories * 0.45) / 4)

    await update.message.reply_text(
        f"{user['name']}, —Ç—ã {user['gender'].lower()}, {user['age']} –ª–µ—Ç.\n"
        f"–¢–≤–æ—è —Ü–µ–ª—å: {user['goal'].lower()}.\n"
        f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞:\n"
        f"üî∏ –ö–∞–ª–æ—Ä–∏–∏: {int(total_calories)} –∫–∫–∞–ª\n"
        f"üî∏ –ë–µ–ª–∫–∏: {proteins} –≥\n"
        f"üî∏ –ñ–∏—Ä—ã: {fats} –≥\n"
        f"üî∏ –£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥\n\n"
        f"–°–∫–æ—Ä–æ —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –º–µ–Ω—é!"
    )
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
            GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, gender)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age)],
            HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, height)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, weight)],
            ACTIVITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, activity)],
            GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, goal)],
        },
        fallbacks=[]
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == '__main__':
    main()
